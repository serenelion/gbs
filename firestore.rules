rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    match /opportunities/{opportunityId} {
      // Allow reading opportunities for everyone
      allow read: if true;
      
      // Allow creating opportunities if authenticated
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow updating only likes and replies arrays if authenticated
      allow update: if isAuthenticated() && (
        // Only allow updating likes array
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) ||
        // Only allow updating replies array
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['replies'])
      );
      
      // Allow deleting only if user owns the opportunity
      allow delete: if isOwner(resource.data.userId);

      // Add rules for replies subcollection
      match /replies/{replyId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.keys().hasAll(['userId', 'userName', 'content', 'createdAt']) &&
          (!request.resource.data.keys().hasAny(['audioUrl']) || request.resource.data.audioUrl is string);
        allow update: if isOwner(resource.data.userId);
        allow delete: if isOwner(resource.data.userId);
      }
    }
  }
} 